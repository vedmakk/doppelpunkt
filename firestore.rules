rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId}/doc/{docId} {
      // Allow reads to only the two known docs for the authenticated user
      allow read: if request.auth != null
                  && request.auth.uid == userId
                  && (docId == 'editor' || docId == 'todo');

      // Allow writes only to the known docs and validate the schema
      allow write: if request.auth != null
                   && request.auth.uid == userId
                   && (docId == 'editor' || docId == 'todo')
                   // updatedAt may be applied via transform, so allow absence here
                   && (
                     request.resource.data.keys().hasOnly(['text', 'rev']) ||
                     request.resource.data.keys().hasOnly(['text', 'updatedAt', 'rev'])
                   )
                   && request.resource.data.text is string
                   && request.resource.data.rev is int
                   // Enforce optimistic locking: rev must increment by exactly 1
                   && (
                     // If creating a new document, require rev == 1
                     (!exists(/databases/$(database)/documents/users/$(userId)/doc/$(docId))
                       && request.resource.data.rev == 1)
                     ||
                     // If document exists, require rev to increment by 1
                     (exists(/databases/$(database)/documents/users/$(userId)/doc/$(docId))
                       && resource.data.rev is int
                       && request.resource.data.rev == resource.data.rev + 1)
                   );

      // Allow deletes only to the known docs and authenticated user
      allow delete: if request.auth != null
                   && request.auth.uid == userId
                   && (docId == 'editor' || docId == 'todo');
    }
    // Per-user configuration document (e.g., Structured Todos settings)
    match /users/{userId}/meta/config {
      allow read, write: if request.auth != null && request.auth.uid == userId
        && (
          // Allow partial updates containing only these keys
          request.resource.data.keys().hasOnly(['structuredEnabled', 'openaiApiKey'])
        )
        && (
          !('structuredEnabled' in request.resource.data) || request.resource.data.structuredEnabled is bool
        )
        && (
          !('openaiApiKey' in request.resource.data) || request.resource.data.openaiApiKey is string
        );
    }
    match /users/{userId} {
      // Allow deletes only for the authenticated user
      allow delete: if request.auth != null
                   && request.auth.uid == userId;
    }
  }
}


